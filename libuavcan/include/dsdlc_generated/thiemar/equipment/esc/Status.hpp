/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /Users/bendyer/Projects/ARM/workspace/uavcan/dsdl/thiemar/equipment/esc/768.Status.uavcan
 */

#ifndef THIEMAR_EQUIPMENT_ESC_STATUS_HPP_INCLUDED
#define THIEMAR_EQUIPMENT_ESC_STATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# Thiemar ESC status.
#

float16[2] i_dq              # Ampere
float16 i_setpoint           # Ampere

float16[2] v_dq              # Volt
float16[2] hfi_dq            # Ampere

float16 consistency          # Normalized

float16 vbus                 # Volt
float16 temperature          # Kelvin

float16 angle                # Normalized [0,1)

int18 rpm
int18 rpm_setpoint

uint5 esc_index
******************************************************************************/

/********************* DSDL signature source definition ***********************
thiemar.equipment.esc.Status
saturated float16[2] i_dq
saturated float16 i_setpoint
saturated float16[2] v_dq
saturated float16[2] hfi_dq
saturated float16 consistency
saturated float16 vbus
saturated float16 temperature
saturated float16 angle
saturated int18 rpm
saturated int18 rpm_setpoint
saturated uint5 esc_index
******************************************************************************/

#undef i_dq
#undef i_setpoint
#undef v_dq
#undef hfi_dq
#undef consistency
#undef vbus
#undef temperature
#undef angle
#undef rpm
#undef rpm_setpoint
#undef esc_index

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace thiemar
{
namespace equipment
{
namespace esc
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT Status_
{
    typedef const Status_<_tmpl>& ParameterType;
    typedef Status_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 2 > i_dq;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > i_setpoint;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 2 > v_dq;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 2 > hfi_dq;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > consistency;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > vbus;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > temperature;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > angle;
        typedef ::uavcan::IntegerSpec< 18, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > rpm;
        typedef ::uavcan::IntegerSpec< 18, ::uavcan::SignednessSigned, ::uavcan::CastModeSaturate > rpm_setpoint;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_index;
    };

    enum
    {
        MinBitLen
            = FieldTypes::i_dq::MinBitLen
            + FieldTypes::i_setpoint::MinBitLen
            + FieldTypes::v_dq::MinBitLen
            + FieldTypes::hfi_dq::MinBitLen
            + FieldTypes::consistency::MinBitLen
            + FieldTypes::vbus::MinBitLen
            + FieldTypes::temperature::MinBitLen
            + FieldTypes::angle::MinBitLen
            + FieldTypes::rpm::MinBitLen
            + FieldTypes::rpm_setpoint::MinBitLen
            + FieldTypes::esc_index::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::i_dq::MaxBitLen
            + FieldTypes::i_setpoint::MaxBitLen
            + FieldTypes::v_dq::MaxBitLen
            + FieldTypes::hfi_dq::MaxBitLen
            + FieldTypes::consistency::MaxBitLen
            + FieldTypes::vbus::MaxBitLen
            + FieldTypes::temperature::MaxBitLen
            + FieldTypes::angle::MaxBitLen
            + FieldTypes::rpm::MaxBitLen
            + FieldTypes::rpm_setpoint::MaxBitLen
            + FieldTypes::esc_index::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::i_dq >::Type i_dq;
    typename ::uavcan::StorageType< typename FieldTypes::i_setpoint >::Type i_setpoint;
    typename ::uavcan::StorageType< typename FieldTypes::v_dq >::Type v_dq;
    typename ::uavcan::StorageType< typename FieldTypes::hfi_dq >::Type hfi_dq;
    typename ::uavcan::StorageType< typename FieldTypes::consistency >::Type consistency;
    typename ::uavcan::StorageType< typename FieldTypes::vbus >::Type vbus;
    typename ::uavcan::StorageType< typename FieldTypes::temperature >::Type temperature;
    typename ::uavcan::StorageType< typename FieldTypes::angle >::Type angle;
    typename ::uavcan::StorageType< typename FieldTypes::rpm >::Type rpm;
    typename ::uavcan::StorageType< typename FieldTypes::rpm_setpoint >::Type rpm_setpoint;
    typename ::uavcan::StorageType< typename FieldTypes::esc_index >::Type esc_index;

    Status_()
        : i_dq()
        , i_setpoint()
        , v_dq()
        , hfi_dq()
        , consistency()
        , vbus()
        , temperature()
        , angle()
        , rpm()
        , rpm_setpoint()
        , esc_index()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<217 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 768 };

    static const char* getDataTypeFullName()
    {
        return "thiemar.equipment.esc.Status";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Status_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        i_dq == rhs.i_dq &&
        i_setpoint == rhs.i_setpoint &&
        v_dq == rhs.v_dq &&
        hfi_dq == rhs.hfi_dq &&
        consistency == rhs.consistency &&
        vbus == rhs.vbus &&
        temperature == rhs.temperature &&
        angle == rhs.angle &&
        rpm == rhs.rpm &&
        rpm_setpoint == rhs.rpm_setpoint &&
        esc_index == rhs.esc_index;
}

template <int _tmpl>
bool Status_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(i_dq, rhs.i_dq) &&
        ::uavcan::areClose(i_setpoint, rhs.i_setpoint) &&
        ::uavcan::areClose(v_dq, rhs.v_dq) &&
        ::uavcan::areClose(hfi_dq, rhs.hfi_dq) &&
        ::uavcan::areClose(consistency, rhs.consistency) &&
        ::uavcan::areClose(vbus, rhs.vbus) &&
        ::uavcan::areClose(temperature, rhs.temperature) &&
        ::uavcan::areClose(angle, rhs.angle) &&
        ::uavcan::areClose(rpm, rhs.rpm) &&
        ::uavcan::areClose(rpm_setpoint, rhs.rpm_setpoint) &&
        ::uavcan::areClose(esc_index, rhs.esc_index);
}

template <int _tmpl>
int Status_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::i_dq::encode(self.i_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::i_setpoint::encode(self.i_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::v_dq::encode(self.v_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::hfi_dq::encode(self.hfi_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::consistency::encode(self.consistency, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vbus::encode(self.vbus, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature::encode(self.temperature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angle::encode(self.angle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rpm::encode(self.rpm, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rpm_setpoint::encode(self.rpm_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_index::encode(self.esc_index, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Status_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::i_dq::decode(self.i_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::i_setpoint::decode(self.i_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::v_dq::decode(self.v_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::hfi_dq::decode(self.hfi_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::consistency::decode(self.consistency, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::vbus::decode(self.vbus, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::temperature::decode(self.temperature, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::angle::decode(self.angle, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rpm::decode(self.rpm, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::rpm_setpoint::decode(self.rpm_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_index::decode(self.esc_index, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Status_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xB56D789616F09E5BULL);

    FieldTypes::i_dq::extendDataTypeSignature(signature);
    FieldTypes::i_setpoint::extendDataTypeSignature(signature);
    FieldTypes::v_dq::extendDataTypeSignature(signature);
    FieldTypes::hfi_dq::extendDataTypeSignature(signature);
    FieldTypes::consistency::extendDataTypeSignature(signature);
    FieldTypes::vbus::extendDataTypeSignature(signature);
    FieldTypes::temperature::extendDataTypeSignature(signature);
    FieldTypes::angle::extendDataTypeSignature(signature);
    FieldTypes::rpm::extendDataTypeSignature(signature);
    FieldTypes::rpm_setpoint::extendDataTypeSignature(signature);
    FieldTypes::esc_index::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Status_<0> Status;

} // Namespace thiemar
} // Namespace equipment
} // Namespace esc

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::thiemar::equipment::esc::Status >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::thiemar::equipment::esc::Status::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::thiemar::equipment::esc::Status >::stream(Stream& s, ::thiemar::equipment::esc::Status::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "i_dq: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::i_dq >::stream(s, obj.i_dq, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "i_setpoint: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::i_setpoint >::stream(s, obj.i_setpoint, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "v_dq: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::v_dq >::stream(s, obj.v_dq, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "hfi_dq: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::hfi_dq >::stream(s, obj.hfi_dq, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "consistency: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::consistency >::stream(s, obj.consistency, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "vbus: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::vbus >::stream(s, obj.vbus, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "temperature: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::temperature >::stream(s, obj.temperature, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "angle: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::angle >::stream(s, obj.angle, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rpm: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::rpm >::stream(s, obj.rpm, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "rpm_setpoint: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::rpm_setpoint >::stream(s, obj.rpm_setpoint, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_index: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::esc_index >::stream(s, obj.esc_index, level + 1);
}

}

namespace thiemar
{
namespace equipment
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::thiemar::equipment::esc::Status::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::thiemar::equipment::esc::Status >::stream(s, obj, 0);
    return s;
}

}
}
}

#endif // THIEMAR_EQUIPMENT_ESC_STATUS_HPP_INCLUDED
