/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /Users/bendyer/Projects/ARM/workspace/vectorcontrol/dsdl/thiemar/equipment/esc/20034.Status.uavcan
 */

#ifndef THIEMAR_EQUIPMENT_ESC_STATUS_HPP_INCLUDED
#define THIEMAR_EQUIPMENT_ESC_STATUS_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

/******************************* Source text **********************************
#
# FOC ESC extended status.
#

float16[2] i_dq              # Ampere
float16 i_setpoint           # Ampere

float16[2] v_dq              # Volt

uint5 esc_index
******************************************************************************/

/********************* DSDL signature source definition ***********************
thiemar.equipment.esc.Status
saturated float16[2] i_dq
saturated float16 i_setpoint
saturated float16[2] v_dq
saturated uint5 esc_index
******************************************************************************/

#undef i_dq
#undef i_setpoint
#undef v_dq
#undef esc_index

namespace thiemar
{
namespace equipment
{
namespace esc
{

template <int _tmpl>
struct UAVCAN_EXPORT Status_
{
    typedef const Status_<_tmpl>& ParameterType;
    typedef Status_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 2 > i_dq;
        typedef ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate > i_setpoint;
        typedef ::uavcan::Array< ::uavcan::FloatSpec< 16, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeStatic, 2 > v_dq;
        typedef ::uavcan::IntegerSpec< 5, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate > esc_index;
    };

    enum
    {
        MinBitLen
            = FieldTypes::i_dq::MinBitLen
            + FieldTypes::i_setpoint::MinBitLen
            + FieldTypes::v_dq::MinBitLen
            + FieldTypes::esc_index::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::i_dq::MaxBitLen
            + FieldTypes::i_setpoint::MaxBitLen
            + FieldTypes::v_dq::MaxBitLen
            + FieldTypes::esc_index::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::i_dq >::Type i_dq;
    typename ::uavcan::StorageType< typename FieldTypes::i_setpoint >::Type i_setpoint;
    typename ::uavcan::StorageType< typename FieldTypes::v_dq >::Type v_dq;
    typename ::uavcan::StorageType< typename FieldTypes::esc_index >::Type esc_index;

    Status_()
        : i_dq()
        , i_setpoint()
        , v_dq()
        , esc_index()
    {
        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<85 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 20034 };

    static const char* getDataTypeFullName()
    {
        return "thiemar.equipment.esc.Status";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool Status_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        i_dq == rhs.i_dq &&
        i_setpoint == rhs.i_setpoint &&
        v_dq == rhs.v_dq &&
        esc_index == rhs.esc_index;
}

template <int _tmpl>
bool Status_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(i_dq, rhs.i_dq) &&
        ::uavcan::areClose(i_setpoint, rhs.i_setpoint) &&
        ::uavcan::areClose(v_dq, rhs.v_dq) &&
        ::uavcan::areClose(esc_index, rhs.esc_index);
}

template <int _tmpl>
int Status_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::i_dq::encode(self.i_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::i_setpoint::encode(self.i_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::v_dq::encode(self.v_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_index::encode(self.esc_index, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int Status_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::i_dq::decode(self.i_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::i_setpoint::decode(self.i_setpoint, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::v_dq::decode(self.v_dq, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::esc_index::decode(self.esc_index, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature Status_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0x60F0AA14C19AA634ULL);

    FieldTypes::i_dq::extendDataTypeSignature(signature);
    FieldTypes::i_setpoint::extendDataTypeSignature(signature);
    FieldTypes::v_dq::extendDataTypeSignature(signature);
    FieldTypes::esc_index::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef Status_<0> Status;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::thiemar::equipment::esc::Status > _uavcan_gdtr_registrator_Status;

}

} // Namespace esc
} // Namespace equipment
} // Namespace thiemar

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::thiemar::equipment::esc::Status >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::thiemar::equipment::esc::Status::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::thiemar::equipment::esc::Status >::stream(Stream& s, ::thiemar::equipment::esc::Status::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "i_dq: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::i_dq >::stream(s, obj.i_dq, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "i_setpoint: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::i_setpoint >::stream(s, obj.i_setpoint, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "v_dq: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::v_dq >::stream(s, obj.v_dq, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "esc_index: ";
    YamlStreamer< ::thiemar::equipment::esc::Status::FieldTypes::esc_index >::stream(s, obj.esc_index, level + 1);
}

}

namespace thiemar
{
namespace equipment
{
namespace esc
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::thiemar::equipment::esc::Status::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::thiemar::equipment::esc::Status >::stream(s, obj, 0);
    return s;
}

} // Namespace esc
} // Namespace equipment
} // Namespace thiemar

#endif // THIEMAR_EQUIPMENT_ESC_STATUS_HPP_INCLUDED