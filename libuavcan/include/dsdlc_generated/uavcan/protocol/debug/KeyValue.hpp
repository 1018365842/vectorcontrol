/*
 * UAVCAN data structure definition for libuavcan.
 *
 * Autogenerated, do not edit.
 *
 * Source file: /mnt/hgfs/workspace/uavcan/dsdl/uavcan/protocol/debug/1022.KeyValue.uavcan
 */

#ifndef UAVCAN_PROTOCOL_DEBUG_KEYVALUE_HPP_INCLUDED
#define UAVCAN_PROTOCOL_DEBUG_KEYVALUE_HPP_INCLUDED

#include <uavcan/build_config.hpp>
#include <uavcan/node/global_data_type_registry.hpp>
#include <uavcan/marshal/types.hpp>

#include <uavcan/protocol/param/Value.hpp>

/******************************* Source text **********************************
#
# Generic named parameter (key/value pair).
#

uint8[<=92] key

uavcan.protocol.param.Value value
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.protocol.debug.KeyValue
saturated uint8[<=92] key
uavcan.protocol.param.Value value
******************************************************************************/

#undef key
#undef value

#ifndef UAVCAN_PACK_STRUCTS
# error UAVCAN_PACK_STRUCTS
#endif

namespace uavcan
{
namespace protocol
{
namespace debug
{

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_BEGIN
#endif

template <int _tmpl>
struct UAVCAN_EXPORT KeyValue_
{
    typedef const KeyValue_<_tmpl>& ParameterType;
    typedef KeyValue_<_tmpl>& ReferenceType;

    struct ConstantTypes
    {
    };

    struct FieldTypes
    {
        typedef ::uavcan::Array< ::uavcan::IntegerSpec< 8, ::uavcan::SignednessUnsigned, ::uavcan::CastModeSaturate >, ::uavcan::ArrayModeDynamic, 92 > key;
        typedef ::uavcan::protocol::param::Value value;
    };

    enum
    {
        MinBitLen
            = FieldTypes::key::MinBitLen
            + FieldTypes::value::MinBitLen
    };

    enum
    {
        MaxBitLen
            = FieldTypes::key::MaxBitLen
            + FieldTypes::value::MaxBitLen
    };

    // Constants

    // Fields
    typename ::uavcan::StorageType< typename FieldTypes::key >::Type key;
    typename ::uavcan::StorageType< typename FieldTypes::value >::Type value;

    KeyValue_()
        : key()
        , value()
    {
        enum { MaxByteLen = ::uavcan::BitLenToByteLen<MaxBitLen>::Result };
        ::uavcan::StaticAssert<int(MaxByteLen) <= int(::uavcan::MaxTransferPayloadLen)>::check();

        ::uavcan::StaticAssert<_tmpl == 0>::check();  // Usage check

#if UAVCAN_DEBUG
        /*
         * Cross-checking MaxBitLen provided by the DSDL compiler.
         * This check shall never be performed in user code because MaxBitLen value
         * actually depends on the nested types, thus it is not invariant.
         */
        ::uavcan::StaticAssert<1867 == MaxBitLen>::check();
#endif
    }

    bool operator==(ParameterType rhs) const;
    bool operator!=(ParameterType rhs) const { return !operator==(rhs); }

    /**
     * This comparison is based on @ref uavcan::areClose(), which ensures proper comparison of
     * floating point fields at any depth.
     */
    bool isClose(ParameterType rhs) const;

    static int encode(ParameterType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    static int decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
                      ::uavcan::TailArrayOptimizationMode tao_mode = ::uavcan::TailArrayOptEnabled);

    /*
     * Static type info
     */
    enum { DataTypeKind = ::uavcan::DataTypeKindMessage };
    enum { DefaultDataTypeID = 1022 };

    static const char* getDataTypeFullName()
    {
        return "uavcan.protocol.debug.KeyValue";
    }

    static void extendDataTypeSignature(::uavcan::DataTypeSignature& signature)
    {
        signature.extend(getDataTypeSignature());
    }

    static ::uavcan::DataTypeSignature getDataTypeSignature();

};

#if UAVCAN_PACK_STRUCTS
UAVCAN_PACKED_END
#endif

/*
 * Out of line struct method definitions
 */

template <int _tmpl>
bool KeyValue_<_tmpl>::operator==(ParameterType rhs) const
{
    return
        key == rhs.key &&
        value == rhs.value;
}

template <int _tmpl>
bool KeyValue_<_tmpl>::isClose(ParameterType rhs) const
{
    return
        ::uavcan::areClose(key, rhs.key) &&
        ::uavcan::areClose(value, rhs.value);
}

template <int _tmpl>
int KeyValue_<_tmpl>::encode(ParameterType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::key::encode(self.key, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::value::encode(self.value, codec,  tao_mode);
    return res;
}

template <int _tmpl>
int KeyValue_<_tmpl>::decode(ReferenceType self, ::uavcan::ScalarCodec& codec,
    ::uavcan::TailArrayOptimizationMode tao_mode)
{
    (void)self;
    (void)codec;
    (void)tao_mode;
    int res = 1;
    res = FieldTypes::key::decode(self.key, codec,  ::uavcan::TailArrayOptDisabled);
    if (res <= 0)
    {
        return res;
    }
    res = FieldTypes::value::decode(self.value, codec,  tao_mode);
    return res;
}

/*
 * Out of line type method definitions
 */
template <int _tmpl>
::uavcan::DataTypeSignature KeyValue_<_tmpl>::getDataTypeSignature()
{
    ::uavcan::DataTypeSignature signature(0xC7042EAE843673A4ULL);

    FieldTypes::key::extendDataTypeSignature(signature);
    FieldTypes::value::extendDataTypeSignature(signature);

    return signature;
}

/*
 * Out of line constant definitions
 */

/*
 * Final typedef
 */
typedef KeyValue_<0> KeyValue;

namespace
{

const ::uavcan::DefaultDataTypeRegistrator< ::uavcan::protocol::debug::KeyValue > _uavcan_gdtr_registrator_KeyValue;

}

} // Namespace uavcan
} // Namespace protocol
} // Namespace debug

/*
 * YAML streamer specialization
 */
namespace uavcan
{

template <>
class UAVCAN_EXPORT YamlStreamer< ::uavcan::protocol::debug::KeyValue >
{
public:
    template <typename Stream>
    static void stream(Stream& s, ::uavcan::protocol::debug::KeyValue::ParameterType obj, const int level);
};

template <typename Stream>
void YamlStreamer< ::uavcan::protocol::debug::KeyValue >::stream(Stream& s, ::uavcan::protocol::debug::KeyValue::ParameterType obj, const int level)
{
    (void)s;
    (void)obj;
    (void)level;
    if (level > 0)
    {
        s << '\n';
        for (int pos = 0; pos < level; pos++)
        {
            s << "  ";
        }
    }
    s << "key: ";
    YamlStreamer< ::uavcan::protocol::debug::KeyValue::FieldTypes::key >::stream(s, obj.key, level + 1);
    s << '\n';
    for (int pos = 0; pos < level; pos++)
    {
        s << "  ";
    }
    s << "value: ";
    YamlStreamer< ::uavcan::protocol::debug::KeyValue::FieldTypes::value >::stream(s, obj.value, level + 1);
}

}

namespace uavcan
{
namespace protocol
{
namespace debug
{

template <typename Stream>
inline Stream& operator<<(Stream& s, ::uavcan::protocol::debug::KeyValue::ParameterType obj)
{
    ::uavcan::YamlStreamer< ::uavcan::protocol::debug::KeyValue >::stream(s, obj, 0);
    return s;
}

}
}
}

#endif // UAVCAN_PROTOCOL_DEBUG_KEYVALUE_HPP_INCLUDED